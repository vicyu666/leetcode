代码风格：
    二元运算符+-*/左右两边加空格
    if, for 和括号之间加空格
    严格按照要求进行程序缩进
    即使 if / for 语句内部只有一句话，也要加上花括号
    变量名使用有意义的英文名，不要用a,b,c,s1,s2
    区分不同的逻辑块，逻辑块之间用空行隔开，简要注释每个部分做的事情
    多用 Helper Function 或子函数，不要所有程序都写在一个大函数里

与面试官沟通的基本原则是：
    不要把面试官当作你的 Interviewer，而要当作你的 Co-worker
    你可以问他索要提示，但是尽可能的不要问太多提示。正如工作中，你可以问你的同事寻求帮助，但是你问太多，问得事无巨细人家也很烦。
    沟通之后再动手。正如工作中，你的同事和你合作的时候，不会喜欢你一声不吭的先按照自己的想法把代码写了。

补充：
    1. 把自己的所有思路全都说出来。
    一开始先把题目复述一遍，期间不断盯着面试官，寻求目光接触，看看自己的解读和思路有没有跑偏。
    讲完思路，说一下具体算法，这时候一般就是面试官会告诉你，可以还是不可以，不可以的话，就接着讲自己新的思路，
    可以的话，就分析一下复杂度，开始写code。要是自己没想法了，就慢慢的再和面试官沟通，
    甚至可以直接问 ”is there any direction that I should be thinking about?” 或者装作自言自语： “Am I missing anything?”.
    2. 画图。
    无论什么题目都可以把问题本身和你想的答案画在白板上，我个人觉得这是和电面最大的不同，也是最大的优势。
    你可以在白板上把算法解释的一清二楚，有可能最后你的代码有几行写不完，至少面试官知道你的算法没问题了。
    3. 遇到极品（天竺）面试官，心平气和，做最坏的打算，别报希望。
    目前为止，面试官是印度哥哥姐姐的，只有一家过了，其他全挂。

更好的办法是：
    首先和面试官进行算法和实现方式上的沟通，从面试官那里得到确认你的方法是OK的，写出来是可以过的。
    开始写代码时，只对一些可能对方不太看得懂的做解释。如果他正在玩手机没看你，就不用理他赶紧写完。
    写完之后再一股脑给他解释代码
    这样就算你没有足够的时间解释代码，但是代码只要能写完，挂的几率就减少了很多。

tips：
1. 二维数组a[row][col]中，a[i][j] = a[i*col+j]。
   反之，i从1到row * col，然后打印grid[i/col][i%col]可以一维变二维。

2. 二分查找往往是在值域里找某一个满足条件的最大最小值(第一个满足条件的值)。
   而当查找第k个满足条件的值时，一般以数量值进行二分查找。
3. 求数组的子数组和最好用到累加和数组，O(n)复杂度。
4. Start with enumerate ( brute force approach, usually 1 or 2 forLoop), and improve.
   我觉得CS是一个整体素质的体现，特别是面试时manager那一轮，
   累的时候多看看Computer Architecture和OS以及Compiler，
   看得多了，你会发现CS的每个领域思想都是一样的，
   更重要的是你会终于发现这些算法究竟在实际中哪里用到了，
   会对心态有很大帮助。而且找工作聊行业聊领域也是很重要的一部分。
5. <<  Left shifting as a quick way to multiply by 2.
6. 区间问题常用扫描线，拆分起点终点。
7. priorityQueue allows duplicate but treeSet does not
8. override comparator的时候，比较object a和object b，假如返回的值小于零，则以a b返回；假如返回的值大于零，则以b a返回
9. char array to string : String.valueOf(arr);